generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id                Int              @id @default(autoincrement())
  email                  String           @unique
  password               String
  nickname               String
  profile_image          String           @default("default_image_url")
  isInitialSetupComplete Boolean          @default(false)
  created_at             DateTime         @default(now())
  userProfile            UserProfile?
  chatroomMembers        chatroom_members[]
  chatMessages           chatMessages[]
  chatrooms              chatrooms[]
  recommends             recommend[]
  userFoodList           userFoodList[]
  todayFood              todayFood[]
  todayExercise          todayExercise[]
  achievement            achievement[]

  @@index([user_id])
}

model UserProfile {
  id            Int      @id @default(autoincrement())
  user_id       Int      @unique
  height        Float
  weight        Float
  target_weight Float
  difficulty    String
  daily_calories Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  user          users    @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
}

model userFoodList {
  food_id       String      @id
  user_id       Int
  menu          String      
  calorie       Int
  carb          Int
  pro           Int
  fat           Int
  img           String
  food_seq      String   @unique
  recommends    recommend[]

  user          users    @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
  @@index([food_id])
}

model chatrooms {
  id           Int               @id @default(autoincrement())
  name         String
  tags         String
  image_url    String?
  max_members  Int
  created_at   DateTime          @default(now())
  updated_at   DateTime          @updatedAt
  owner_id     Int

  chatroomMembers chatroom_members[]
  chatMessages    chatMessages[]
  notices         notices[]
  user            users             @relation(fields: [owner_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id])
}

model chatroom_members {
  id          Int       @id @default(autoincrement())
  chatroom_id Int
  user_id     Int
  joined_at   DateTime  @default(now())

  chatroom    chatrooms @relation(fields: [chatroom_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)

  @@index([chatroom_id])
  @@index([user_id])
   @@unique([chatroom_id, user_id])
}

model chatImageMessage {
  id          Int            @id @default(autoincrement())
  path        String
  createdAt   DateTime       @default(now())
  chatMessages chatMessages[]

  @@index([id])
}

model chatMessages {
  id          Int            @id @default(autoincrement())
  chatroom_id Int
  user_id     Int?
  message     String?
  image_id    Int?
  created_at  DateTime       @default(now())

  chatroom    chatrooms      @relation(fields: [chatroom_id], references: [id], onDelete: Cascade)
  user        users?         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  image       chatImageMessage? @relation(fields: [image_id], references: [id])

  @@index([chatroom_id])
  @@index([user_id])
  @@index([image_id])
}

model notices {
  id          Int      @id @default(autoincrement())
  chatroom_id Int
  title       String
  content     String
  created_at  DateTime @default(now())

  chatroom    chatrooms @relation(fields: [chatroom_id], references: [id], onDelete: Cascade)

  @@index([chatroom_id])
}

model recommend {
  id          Int           @id @default(autoincrement())
  user_id     Int
  food_id     String
  recommend   String

  user        users         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  food        userFoodList  @relation(fields: [food_id], references: [food_id], onDelete: Cascade)

  @@index([user_id])
  @@index([food_id])
}

model todayFood {
  id          Int           @id @default(autoincrement())
  user_id     Int
  food_id     String
  added_at    DateTime      @default(now())

  user        users         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model todayExercise {
  id          Int           @id @default(autoincrement())
  user_id     Int
  exercise_id Int
  duration    Int
  calories    Float
  added_at    DateTime      @default(now())

  user        users         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model achievement {
  id          Int      @id @default(autoincrement())
  user_id     Int
  date        DateTime
  achievement Int

  user        users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, date], name: "user_date_unique")
}

